// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonSvcClient is the client API for PersonSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonSvcClient interface {
	PersonList(ctx context.Context, in *PersonListRequest, opts ...grpc.CallOption) (*PersonListResponse, error)
}

type personSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonSvcClient(cc grpc.ClientConnInterface) PersonSvcClient {
	return &personSvcClient{cc}
}

func (c *personSvcClient) PersonList(ctx context.Context, in *PersonListRequest, opts ...grpc.CallOption) (*PersonListResponse, error) {
	out := new(PersonListResponse)
	err := c.cc.Invoke(ctx, "/rpc.PersonSvc/PersonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonSvcServer is the server API for PersonSvc service.
// All implementations must embed UnimplementedPersonSvcServer
// for forward compatibility
type PersonSvcServer interface {
	PersonList(context.Context, *PersonListRequest) (*PersonListResponse, error)
	mustEmbedUnimplementedPersonSvcServer()
}

// UnimplementedPersonSvcServer must be embedded to have forward compatible implementations.
type UnimplementedPersonSvcServer struct {
}

func (UnimplementedPersonSvcServer) PersonList(context.Context, *PersonListRequest) (*PersonListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonList not implemented")
}
func (UnimplementedPersonSvcServer) mustEmbedUnimplementedPersonSvcServer() {}

// UnsafePersonSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonSvcServer will
// result in compilation errors.
type UnsafePersonSvcServer interface {
	mustEmbedUnimplementedPersonSvcServer()
}

func RegisterPersonSvcServer(s grpc.ServiceRegistrar, srv PersonSvcServer) {
	s.RegisterService(&PersonSvc_ServiceDesc, srv)
}

func _PersonSvc_PersonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonSvcServer).PersonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PersonSvc/PersonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonSvcServer).PersonList(ctx, req.(*PersonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonSvc_ServiceDesc is the grpc.ServiceDesc for PersonSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PersonSvc",
	HandlerType: (*PersonSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PersonList",
			Handler:    _PersonSvc_PersonList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person.proto",
}
